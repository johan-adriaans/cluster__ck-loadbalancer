global
    daemon
    log /dev/log   local0
    log /dev/log   local1 notice
    pidfile /var/run/haproxy.pid
    maxconn 128000
    user haproxy
    group haproxy

    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-options no-sslv3 no-tls-tickets

defaults
    log    global
    # make sure log-format is on a single line
    log-format {"type":"haproxy","timestamp":%Ts,"http_status":%ST,"http_request":"%r","remote_addr":"%ci","bytes_read":%B,"upstream_addr":"%si","backend_name":"%b","retries":%rc,"bytes_uploaded":%U,"upstream_response_time":"%Tr","upstream_connect_time":"%Tc","session_duration":"%Tt","termination_state":"%ts"}

    option dontlognull
    timeout http-request 35s
    timeout connect 5s
    timeout server 30s
    timeout client 30s

# Sites
frontend ft_web
    bind :80
    bind :443 ssl crt /etc/ssl/private
    mode http
    option http-server-close
    option http-keep-alive

    # IP based blocking
    tcp-request inspect-delay 2s
    tcp-request connection accept if { src -f /etc/haproxy/access_control/whitelist.lst }
    tcp-request connection reject if { src -f /etc/haproxy/access_control/blacklist.lst }

    # Use General Purpose Couter (gpc) 0 in SC1 as a global abuse counter
    # Monitors the number of request sent by an IP over a period of 10 seconds
    stick-table type ip size 200k expire 1s store gpc0,http_req_rate(10s)
    tcp-request connection track-sc1 src
    tcp-request connection reject if { src_get_gpc0 gt 0 }

    # Block bad bots
    acl badbots hdr_reg(User-Agent) -i -f /etc/haproxy/access_control/badbots.lst
    http-request deny if badbots

    # Force HTTPS
    #redirect scheme https code 301 if !{ ssl_fc }

    # Split static and dynamic traffic since these requests have different impacts on the servers
    use_backend bk_web_static if { path_end .jpg .png .gif .css .js }

    default_backend bk_web

backend bk_web
    mode http
    balance roundrobin
    option forwardfor
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    # If the source IP sent x or more http request over the defined period,
    # flag the IP as abuser on the frontend
    acl abuse src_http_req_rate(ft_web) ge 50
    acl flag_abuser src_inc_gpc0(ft_web) --
    tcp-request content reject if abuse flag_abuser

    # Let backend know if this was an https request
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    {{range $index, $machine := ls "/services/webserver"}}
      {{range $container := ls (printf "/services/webserver/%s" $machine)}}
        {{$upstream_path := printf "/services/webserver/%s/%s/upstreams/1080" $machine $container}}
        {{if exists $upstream_path}}
           server member{{$index}} {{getv $upstream_path}} check maxconn 9
        {{end}}
      {{end}}
    {{end}}

backend bk_web_static
    mode http
    balance roundrobin
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    # Let backend know if this was an https request
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    {{range $index, $machine := ls "/services/webserver"}}
      {{range $container := ls (printf "/services/webserver/%s" $machine)}}
        {{$upstream_path := printf "/services/webserver/%s/%s/upstreams/1080" $machine $container}}
        {{if exists $upstream_path}}
           server member{{$index}} {{getv $upstream_path}} check maxconn 1000
        {{end}}
      {{end}}
    {{end}}

listen MyStats
    mode http
    bind 0.0.0.0:1000
    stats enable
    stats uri /
    stats refresh 5s
    stats show-node
    stats show-legends

    # Authentication
    acl auth_ok http_auth(admin-auth)
    http-request auth unless auth_ok

userlist admin-auth
    user admin insecure-password demo
